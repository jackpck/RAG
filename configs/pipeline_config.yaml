pipeline:
  - name: load_data
    class: src.components.loader.DataLoader
    method: load_from_wikipedia_api
    params:
      metadata: {"source": "battle of stalingrad"}
    input:
      title: "Battle of Stalingrad"
    output: docs

  - name: chunking
    class: src.components.chunker.TextSplitter
    method: split
    params:
      chunk_size: 1000
      chunk_overlap: 100
    input:
      docs: docs
    output: split_docs

  - name: embedding
    class: src.components.embedder.DocEmbedder
    method: embed
    params:
      model_name: "all-MiniLM-L6-v2"
      vs_name: "faiss_index"
    input:
      split_docs: split_docs
      persist_vs: False
    output: vectorstore

  - name: retrieving
    class: src.components.retriever.ChunkRetriever
    method: retrieve
    params:
      retriever_search_type: "similarity"
      retriever_search_kwargs: {"k":50}
    input:
      vectorstore: vectorstore
    output: retriever

  - name: reranking
    class: src.components.reranker.Reranker
    method: rerank
    params:
      k_rerank: 10 # choose top k reranker score
      model_rerank: "gemini-2.5-flash"
      model_rerank_provider: "google_genai"
      temperature_rerank: 0
      top_k_rerank: 5 # top k token in generation of the rerank score
      top_p_rerank: 0.8
      reranker_prompt_path: "./src/prompts/reranker_prompt.txt"
    input:
      retriever: retriever
      query:
    output: reranked_retriever

  - name: generating
    class: src.components.generator.GeneratorLLM
    method: llm
    params:
      model: "gemini-2.5-flash"
      model_provider: "google_genai"
      temperature: 0
      top_k: 5 # top k token in generation of the rerank score
      top_p: 0.9
      system_prompt_path: "./src/prompts/system_prompt.txt"
    input:
    output:

